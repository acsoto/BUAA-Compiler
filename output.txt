INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19231177\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR _
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
INTCON 20
SEMICN ;
INTTK int
IDENFR b
COMMA ,
IDENFR c
ASSIGN =
INTCON 460
SEMICN ;
IDENFR b
ASSIGN =
INTCON 30
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "_ = %d; a = %d; b = %d; c = %d;\n"
COMMA ,
IDENFR _
COMMA ,
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
INTTK int
IDENFR n1
COMMA ,
IDENFR n2
COMMA ,
IDENFR n3
COMMA ,
IDENFR n4
COMMA ,
IDENFR n5
SEMICN ;
IDENFR n1
ASSIGN =
IDENFR a
PLUS +
IDENFR b
SEMICN ;
IDENFR n2
ASSIGN =
IDENFR c
MINU -
IDENFR _
SEMICN ;
IDENFR n3
ASSIGN =
IDENFR n1
MULT *
IDENFR n2
SEMICN ;
IDENFR n4
ASSIGN =
IDENFR n2
DIV /
IDENFR n1
SEMICN ;
IDENFR n5
ASSIGN =
IDENFR n3
MOD %
IDENFR b
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d+%d=%d; %d-%d=%d; %d*%d=%d; %d/%d=%d; %dmod%d=%d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR n1
COMMA ,
IDENFR c
COMMA ,
IDENFR _
COMMA ,
IDENFR n2
COMMA ,
IDENFR n1
COMMA ,
IDENFR n2
COMMA ,
IDENFR n3
COMMA ,
IDENFR n2
COMMA ,
IDENFR n1
COMMA ,
IDENFR n4
COMMA ,
IDENFR n3
COMMA ,
IDENFR b
COMMA ,
IDENFR n5
RPARENT )
SEMICN ;
INTTK int
IDENFR a1
ASSIGN =
IDENFR n1
PLUS +
IDENFR n2
PLUS +
IDENFR n3
COMMA ,
IDENFR a2
ASSIGN =
IDENFR n2
MINU -
IDENFR n3
MINU -
IDENFR n4
COMMA ,
IDENFR a3
ASSIGN =
IDENFR n3
MULT *
IDENFR n4
MULT *
IDENFR n5
COMMA ,
IDENFR a4
ASSIGN =
IDENFR n5
DIV /
IDENFR n1
DIV /
IDENFR n4
COMMA ,
IDENFR a5
ASSIGN =
IDENFR n4
MOD %
IDENFR n1
MOD %
IDENFR n1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d+%d+%d=%d; %d-%d-%d=%d; %d*%d*%d=%d; %d/%d/%d=%d; %dmod%dmod%d=%d\n"
COMMA ,
IDENFR n1
COMMA ,
IDENFR n2
COMMA ,
IDENFR n3
COMMA ,
IDENFR a1
COMMA ,
IDENFR n2
COMMA ,
IDENFR n3
COMMA ,
IDENFR n4
COMMA ,
IDENFR a2
COMMA ,
IDENFR n3
COMMA ,
IDENFR n4
COMMA ,
IDENFR n5
COMMA ,
IDENFR a3
COMMA ,
IDENFR n5
COMMA ,
IDENFR n1
COMMA ,
IDENFR n2
COMMA ,
IDENFR a4
COMMA ,
IDENFR n4
COMMA ,
IDENFR n5
COMMA ,
IDENFR n1
COMMA ,
IDENFR a5
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
INTTK int
IDENFR m_1
ASSIGN =
INTCON 10
COMMA ,
IDENFR m_2
ASSIGN =
INTCON 17
COMMA ,
IDENFR m_3
ASSIGN =
INTCON 23
COMMA ,
IDENFR m_4
ASSIGN =
INTCON 37
COMMA ,
IDENFR m_5
ASSIGN =
INTCON 43
COMMA ,
IDENFR m_6
ASSIGN =
INTCON 71
SEMICN ;
INTTK int
IDENFR r1
ASSIGN =
IDENFR m_1
PLUS +
IDENFR m_2
MINU -
IDENFR m_3
MULT *
IDENFR m_4
DIV /
IDENFR m_5
MOD %
IDENFR m_6
MINU -
IDENFR m_2
MULT *
IDENFR m_3
PLUS +
IDENFR m_5
SEMICN ;
INTTK int
IDENFR r2
ASSIGN =
IDENFR m_1
PLUS +
LPARENT (
IDENFR m_2
MINU -
IDENFR m_3
RPARENT )
MULT *
IDENFR m_4
DIV /
IDENFR m_5
MOD %
LPARENT (
IDENFR m_6
MINU -
IDENFR m_4
RPARENT )
MULT *
IDENFR r1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d+%d-%d*%d/%dmod%d-%d*%d+%d=%d=%d\n"
COMMA ,
IDENFR m_1
COMMA ,
IDENFR m_2
COMMA ,
IDENFR m_3
COMMA ,
IDENFR m_4
COMMA ,
IDENFR m_5
COMMA ,
IDENFR m_6
COMMA ,
IDENFR m_2
COMMA ,
IDENFR m_3
COMMA ,
IDENFR m_5
COMMA ,
IDENFR r1
COMMA ,
IDENFR m_1
PLUS +
IDENFR m_2
MINU -
IDENFR m_3
MULT *
IDENFR m_4
DIV /
IDENFR m_5
MOD %
IDENFR m_6
MINU -
IDENFR m_2
MULT *
IDENFR m_3
PLUS +
IDENFR m_5
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d+(%d-%d)*%d/%dmod(%d-%d)*%d=%d\n"
COMMA ,
IDENFR m_1
COMMA ,
IDENFR m_2
COMMA ,
IDENFR m_3
COMMA ,
IDENFR m_4
COMMA ,
IDENFR m_5
COMMA ,
IDENFR m_6
COMMA ,
IDENFR m_4
COMMA ,
IDENFR r1
COMMA ,
IDENFR r2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "all chars : !()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR test_1
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR old
ASSIGN =
IDENFR i
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR test_1
ASSIGN =
IDENFR test_1
MULT *
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR test_1
EQL ==
INTCON 120
RPARENT )
LBRACE {
IDENFR test_1
ASSIGN =
IDENFR test_1
PLUS +
INTCON 7
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR test_1
GRE >
INTCON 119
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR test_1
ASSIGN =
IDENFR test_1
PLUS +
INTCON 3
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
GEQ >=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "a"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
LEQ <=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "a"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "b"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d!+7+3=%d\n"
COMMA ,
IDENFR old
COMMA ,
IDENFR test_1
RPARENT )
SEMICN ;
INTTK int
IDENFR nn_1
ASSIGN =
PLUS +
INTCON 1
COMMA ,
IDENFR nn2
ASSIGN =
MINU -
INTCON 1
COMMA ,
IDENFR nn3
ASSIGN =
PLUS +
MINU -
INTCON 1
COMMA ,
IDENFR nn4
ASSIGN =
MINU -
PLUS +
INTCON 1
COMMA ,
IDENFR nn5
ASSIGN =
MINU -
PLUS +
MINU -
INTCON 1
COMMA ,
IDENFR nn6
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 1
COMMA ,
IDENFR nn7
ASSIGN =
MINU -
PLUS +
MINU -
PLUS +
INTCON 1
COMMA ,
IDENFR nn8
ASSIGN =
PLUS +
MINU -
PLUS +
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR nn_1
PLUS +
IDENFR nn2
PLUS +
IDENFR nn3
PLUS +
IDENFR nn4
PLUS +
IDENFR nn5
PLUS +
IDENFR nn6
PLUS +
IDENFR nn7
PLUS +
IDENFR nn8
NEQ !=
INTCON 0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR nn_1
PLUS +
IDENFR nn2
PLUS +
IDENFR nn3
PLUS +
IDENFR nn4
PLUS +
IDENFR nn5
PLUS +
IDENFR nn6
PLUS +
IDENFR nn7
PLUS +
IDENFR nn8
NEQ !=
INTCON 0
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "! : error\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR max_int
ASSIGN =
INTCON 2147483647
SEMICN ;
INTTK int
IDENFR min_int
ASSIGN =
MINU -
INTCON 2147483647
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "max: %d ; min : %d ; sum : %d\n"
COMMA ,
IDENFR max_int
COMMA ,
IDENFR min_int
COMMA ,
IDENFR max_int
PLUS +
IDENFR min_int
RPARENT )
SEMICN ;
INTTK int
IDENFR remain
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR remain_index
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR remain_index
LSS <
IDENFR remain
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19231177\n"
RPARENT )
SEMICN ;
IDENFR remain_index
ASSIGN =
IDENFR remain_index
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
